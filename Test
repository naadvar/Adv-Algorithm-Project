import pandas as pd
import json

def flatten_json(y, parent_key='', sep='_'):
    """
    Recursively flattens a nested JSON structure.
    
    Args:
        y (dict or list): The JSON data.
        parent_key (str): The base key string for nested keys.
        sep (str): The separator between parent and child keys.

    Returns:
        dict: A flat dictionary with keys representing the path of each value.
    """
    items = []
    if isinstance(y, dict):
        for k, v in y.items():
            new_key = f"{parent_key}{sep}{k}" if parent_key else k
            if isinstance(v, dict):
                items.extend(flatten_json(v, new_key, sep=sep).items())
            elif isinstance(v, list):
                for i, item in enumerate(v):
                    items.extend(flatten_json(item, f"{new_key}_{i}", sep=sep).items())
            else:
                items.append((new_key, v))
    elif isinstance(y, list):
        for i, item in enumerate(y):
            items.extend(flatten_json(item, f"{parent_key}_{i}", sep=sep).items())
    else:
        items.append((parent_key, y))
    return dict(items)

def json_to_flat_dataframe(json_data):
    """
    Converts a deeply nested JSON structure into a flat pandas DataFrame.
    
    Args:
        json_data (dict or list): JSON data to be converted.

    Returns:
        pd.DataFrame: A DataFrame with key-value pairs as rows.
    """
    # Flatten each entry in the JSON data (assuming it's a list of entries)
    if isinstance(json_data, list):
        flat_data = [flatten_json(item) for item in json_data]
    else:
        flat_data = [flatten_json(json_data)]
    
    # Convert the list of flattened dictionaries to a DataFrame
    return pd.DataFrame(flat_data)

# Example usage
# Load your JSON data from a file, API, or other source
# Assuming `json_data` is your complex nested JSON structure (replace with your actual data)
