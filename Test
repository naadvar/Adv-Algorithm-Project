from pyspark.sql import functions as F
from pyspark.sql.types import StructType, StructField, StringType, ArrayType, MapType

# Define a recursive function to clean up empty values within nested structures and track removed keys
def clean_nested_structure(data):
    removed_keys = []
    
    if isinstance(data, dict):
        cleaned_data = {}
        for k, v in data.items():
            if v in [None, "", " "]:
                removed_keys.append(k)
            else:
                cleaned_value, nested_removed_keys = clean_nested_structure(v)
                cleaned_data[k] = cleaned_value
                removed_keys.extend(nested_removed_keys)
        return cleaned_data, removed_keys
    
    elif isinstance(data, list):
        cleaned_data = []
        for item in data:
            if item not in [None, "", " "]:
                cleaned_value, nested_removed_keys = clean_nested_structure(item)
                cleaned_data.append(cleaned_value)
                removed_keys.extend(nested_removed_keys)
        return cleaned_data, removed_keys

    elif isinstance(data, Row):
        # Convert Row to dictionary, clean, and keep track of removed keys
        cleaned_data = {}
        for field, value in data.asDict().items():
            if value in [None, "", " "]:
                removed_keys.append(field)
            else:
                cleaned_value, nested_removed_keys = clean_nested_structure(value)
                cleaned_data[field] = cleaned_value
                removed_keys.extend(nested_removed_keys)
        return cleaned_data, removed_keys

    # For other types, return as-is with no removed keys
    return data, removed_keys

# Define a helper UDF function to clean the nested structure and return both cleaned data and removed keys
def udf_clean_nested_structure(data):
    cleaned_data, removed_keys = clean_nested_structure(data)
    return (cleaned_data, removed_keys)

# Define the schema for the returned struct from the UDF
schema = StructType([
    StructField("cleaned_data", MapType(StringType(), StringType())),  # Modify to appropriate type based on your structure
    StructField("removed_keys", ArrayType(StringType()))
])

# Register the UDF with the defined schema
clean_nested_structure_udf = F.udf(udf_clean_nested_structure, schema)

# Apply the UDF to clean the entire experianCreditBureau structure
exp_1 = exp_1.withColumn(
    'cleaned_experianCreditBureau',
    clean_nested_structure_udf(F.col('experianResponse.experianCreditBureau'))
)

# Update experianCreditBureau with cleaned data and extract removed keys as a separate column
exp_1 = exp_1.withColumn("experianResponse.experianCreditBureau", F.col("cleaned_experianCreditBureau.cleaned_data")) \
             .withColumn("removed_keys", F.col("cleaned_experianCreditBureau.removed_keys")) \
             .drop("cleaned_experianCreditBureau")

# Show the modified DataFrame with both cleaned experianCreditBureau and removed keys
exp_1.select('experianResponse.experianCreditBureau', 'removed_keys').show(truncate=False)
    
