import pandas as pd
import numpy as np

# Example DataFrame with columns 'Meeting ID', 'Date', 'Job Level', 'Organization', and 'Employee ID'
data = {
    'Meeting ID': [1, 2, 3],
    'Date': ['2024-04-01', '2024-04-02', '2024-04-03'],
    'Job Level': [[3.5, 2.5, 'NaN'], [2.0, 3.0, 4.0], [4.5, 3.8, 2.8]],
    'Organization': [['Marketing', 'Engineering', 'Marketing'], ['HR', 'Engineering', 'Marketing'], ['Engineering', 'Marketing', 'HR']],
    'Employee ID': [[101, 102, 103], [104, 105, 106], [107, 108, 109]]
}

# Create a pandas DataFrame
df = pd.DataFrame(data)

# Replace 'NaN' strings with numpy NaN values
df['Job Level'] = df['Job Level'].apply(lambda x: [float(val) if val != 'NaN' else np.nan for val in x])

# Create a DataFrame to store the highest job level within each organization for each meeting
highest_job_levels_df = df.groupby(['Meeting ID', 'Organization', 'Date'])['Job Level'].max().reset_index()

# Dictionary to store the count of each employee being the most senior within his organization for each meeting ID and date
most_senior_count_per_meeting_date = {}

# Iterate over the DataFrame to count the most senior persons in each meeting for each date
for row in highest_job_levels_df.itertuples(index=False):
    meeting_id, organization, date, highest_job_level = row
    mask = (df['Meeting ID'] == meeting_id) & (df['Organization'].apply(lambda x: x == organization)) & (df['Date'] == date)
    senior_mask = df['Job Level'].apply(lambda x: x == highest_job_level)
    counts = df[mask & senior_mask]['Employee ID'].apply(lambda x: Counter(x)).sum()
    if meeting_id not in most_senior_count_per_meeting_date:
        most_senior_count_per_meeting_date[meeting_id] = {}
    most_senior_count_per_meeting_date[meeting_id][date] = counts

# Dictionary to store the count of each employee being the most senior and the ratio
employee_seniority_stats = {}

# Iterate over the most_senior_count_per_meeting_date dictionary to calculate counts and ratios
for meeting_id, dates in most_senior_count_per_meeting_date.items():
    for date, counts in dates.items():
        for employee_id, count in counts.items():
            total_meetings = len(df[(df['Meeting ID'] == meeting_id) & (df['Date'] == date)])
            ratio = count / total_meetings
            if employee_id not in employee_seniority_stats:
                employee_seniority_stats[employee_id] = {'total_count': count, 'total_meetings': total_meetings, 'total_ratio': ratio}
            else:
                employee_seniority_stats[employee_id]['total_count'] += count
                employee_seniority_stats[employee_id]['total_meetings'] += total_meetings
                employee_seniority_stats[employee_id]['total_ratio'] += ratio

# Print the count of each employee being the most senior within his organization for each meeting ID and date
for employee_id, stats in employee_seniority_stats.items():
    print(f"Employee ID: {employee_id}")
    print(f"Total count of being the most senior: {stats['total_count']}")
    print(f"Total meetings attended: {stats['total_meetings']}")
    print(f"Overall ratio: {stats['total_ratio']:.2f}\n")


# Create a DataFrame to store the highest job level within each organization for each meeting
highest_job_levels_df = df.groupby(['Meeting ID', 'Organization', 'Date'])['Job Level'].max().reset_index()

# Dictionary to store the count of each employee being the most senior within his organization for each meeting ID and date
most_senior_count_per_meeting_date = {}

# Iterate over the DataFrame to count the most senior persons in each meeting for each date
for row in highest_job_levels_df.itertuples(index=False):
    meeting_id, organization, date, highest_job_level = row
    mask = (df['Meeting ID'] == meeting_id) & (df['Organization'].apply(lambda x: x == organization)) & (df['Date'] == date)
    senior_mask = df['Job Level'].apply(lambda x: x == highest_job_level)
    
    # Count the occurrences of each Employee ID and sum them up
    counts = df[mask & senior_mask].explode('Employee ID').groupby('Employee ID').size().sum()
    
    if meeting_id not in most_senior_count_per_meeting_date:
        most_senior_count_per_meeting_date[meeting_id] = {}
    most_senior_count_per_meeting_date[meeting_id][date] = counts
