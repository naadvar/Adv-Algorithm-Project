import pandas as pd

# Sample data as a pandas DataFrame
data = {
    'Job Level': [[3.0, 2.0, 4.0, 1.0, 3.0],
                  [float('nan'), 1.0, 3.0, 2.0, 4.0],
                  [2.0, 3.0, 1.0, 4.0, 3.0]],
    'Organization': [['Marketing', 'Finance', 'HR', 'IT', 'Marketing'],
                     ['HR', 'Marketing', 'Finance', 'IT', 'HR'],
                     ['Finance', 'HR', 'Marketing', 'IT', 'Finance']],
    'Employee ID': [['EMP001', 'EMP002', 'EMP003', 'EMP004', 'EMP005'],
                    ['EMP006', 'EMP007', 'EMP008', 'EMP009', 'EMP010'],
                    ['EMP011', 'EMP012', 'EMP013', 'EMP014', 'EMP015']],
    'Meeting ID': [1, 1, 2, 2, 3],
    'Meeting Date': ['2024-04-28', '2024-04-28', '2024-04-29', '2024-04-29', '2024-04-30']
}

df = pd.DataFrame(data)

# Function to count the number of times each person was the most senior member in his organization for each meeting ID and date
def count_most_senior_in_organization(df):
    senior_count_by_meeting = {}
    senior_count_overall = {}
    total_meetings_attended = {}
    max_levels = {}
    
    for idx, row in df.iterrows():
        job_levels = row['Job Level']
        organizations = row['Organization']
        employee_ids = row['Employee ID']
        meeting_id = row['Meeting ID']
        meeting_date = row['Meeting Date']
        
        for level, org, emp in zip(job_levels, organizations, employee_ids):
            total_meetings_attended[emp] = total_meetings_attended.get(emp, 0) + 1
            
            if (meeting_id, meeting_date) not in max_levels:
                max_levels[(meeting_id, meeting_date)] = {}
                senior_count_by_meeting[(meeting_id, meeting_date)] = defaultdict(int)
                
            if org not in max_levels[(meeting_id, meeting_date)] or level > max_levels[(meeting_id, meeting_date)][org]:
                max_levels[(meeting_id, meeting_date)][org] = level
                senior_count_by_meeting[(meeting_id, meeting_date)][emp] = 1
                senior_count_overall[emp] = senior_count_overall.get(emp, 0) + 1
            elif level == max_levels[(meeting_id, meeting_date)][org]:
                senior_count_by_meeting[(meeting_id, meeting_date)][emp] += 1
                senior_count_overall[emp] = senior_count_overall.get(emp, 0) + 1
                
    return senior_count_by_meeting, senior_count_overall, total_meetings_attended

# Count the number of times each person was the most senior member in his organization for each meeting ID and date, overall, and total meetings attended
senior_count_by_meeting, senior_count_overall, total_meetings_attended = count_most_senior_in_organization(df)

# Print the counts for each meeting ID and date
print("Senior count by meeting ID and date:")
for (meeting_id, meeting_date), count in senior_count_by_meeting.items():
    print(f"Meeting ID: {meeting_id}, Date: {meeting_date}, Senior count: {count}")

# Print the overall counts
print("\nOverall senior count:")
for emp, count in senior_count_overall.items():
    print(f"Employee ID: {emp}, Overall senior count: {count}")

# Print the total meetings attended by each person
print("\nTotal meetings attended:")
for emp, count in total_meetings_attended.items():
    print(f"Employee ID: {emp}, Total meetings attended: {count}")

# Calculate and print the ratio of being the most senior member in the organization to the total number of meetings attended
print("\nRatio of being the most senior member in the organization to total meetings attended:")
for emp in senior_count_overall.keys():
    ratio = senior_count_overall[emp] / total_meetings_attended[emp]
    print(f"Employee ID: {emp}, Ratio: {ratio:.2f}")
